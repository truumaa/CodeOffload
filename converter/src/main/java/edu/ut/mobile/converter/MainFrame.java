/*
 *Tried rescuing the code as much as possible :)
 * MainFrame.java
 *
 * Created on May 14, 2013, 8:20:55 PM
 */
package edu.ut.mobile.converter;


import edu.ut.mobile.util.EditMojo;

import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.FileChannel;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class MainFrame extends javax.swing.JFrame {
    final static Logger logger = Logger.getLogger(MainFrame.class.getName());
    String projectPath = null;
    byte[] IPAddress = new byte[4];
    int port;
    int waittime;
    Object ob = new Object();
    private static final String ANDROID_NETWORK_SOURCE = "src/edu/ut/mobile/network/";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        projectTF = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        convertButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        clientLable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        serverLable = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        IPAddressTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        PortTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        waitTimeEF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Code Offloading");

        projectTF.setEditable(false);
        projectTF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        selectButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        selectButton.setText("Select Source Project Folder");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        convertButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        convertButton.setText("Convert");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Client:");

        clientLable.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        clientLable.setForeground(java.awt.Color.blue);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Server:");

        serverLable.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        serverLable.setForeground(java.awt.Color.blue);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Server IP Address:");

        IPAddressTF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("Port:");

        PortTF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Wait time for cloud response:");

        waitTimeEF.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel6.setText("milliseconds");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(83, 83, 83)
                                                .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(258, 258, 258))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(waitTimeEF, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel6))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(projectTF, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(selectButton))
                                        .addComponent(jLabel1)
                                        .addComponent(clientLable, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(serverLable, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(IPAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(24, 24, 24)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(PortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(projectTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(selectButton))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(IPAddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4)
                                        .addComponent(PortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(waitTimeEF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6))
                                .addGap(19, 19, 19)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(convertButton)
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clientLable)
                                .addGap(64, 64, 64)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverLable)
                                .addGap(121, 121, 121))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogType(JFileChooser.OPEN_DIALOG);
        jfc.setDialogTitle("Select Source Project Folder");
        jfc.setMultiSelectionEnabled(false);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (!projectTF.getText().trim().isEmpty()) {
            jfc.setCurrentDirectory(new File(projectTF.getText()));
        } else {
            jfc.setCurrentDirectory(new File("D:\\GDrive\\Google Drive"));
        }
        int state = jfc.showDialog(this, null);
        if (state == JFileChooser.APPROVE_OPTION) {
            projectPath = jfc.getSelectedFile().toString();
            projectTF.setText(projectPath);
        }

    }//GEN-LAST:event_selectButtonActionPerformed

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        if (projectPath == null) {
            JOptionPane.showConfirmDialog(this, "Please first select a project folder", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
        } else {
            String[] projectChildren = new File(projectPath).list();
            boolean isrealProject = false;
            for (int i = 0; i < projectChildren.length; i++) {
                if (projectChildren[i].compareToIgnoreCase("src") == 0) {
                    isrealProject = true;
                    break;
                }
            }
            if (!isrealProject) {
                JOptionPane.showConfirmDialog(this, "Please select a correct project folder", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    String st = IPAddressTF.getText();
                    int lastdot = -1;
                    IPAddress[0] = Integer.valueOf(st.substring(lastdot + 1, st.indexOf('.', lastdot + 1))).byteValue();
                    lastdot = st.indexOf('.', lastdot + 1);
                    IPAddress[1] = Integer.valueOf(st.substring(lastdot + 1, st.indexOf('.', lastdot + 1))).byteValue();
                    lastdot = st.indexOf('.', lastdot + 1);
                    IPAddress[2] = Integer.valueOf(st.substring(lastdot + 1, st.indexOf('.', lastdot + 1))).byteValue();
                    lastdot = st.indexOf('.', lastdot + 1);
                    IPAddress[3] = Integer.valueOf(st.substring(lastdot + 1)).byteValue();
                } catch (Exception ex) {
                    JOptionPane.showConfirmDialog(this, "Please enter Server IP address correctly ", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try {
                    String st = PortTF.getText();
                    port = Integer.valueOf(st).intValue();
                } catch (Exception ex) {
                    JOptionPane.showConfirmDialog(this, "Please enter the Port correctly ", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try {
                    String st = waitTimeEF.getText();
                    waittime = Integer.valueOf(st).intValue();
                } catch (Exception ex) {
                    JOptionPane.showConfirmDialog(this, "Please enter the wait time for cloud response correctly ", "ERROR", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                jProgressBar1.setIndeterminate(true);
                Thread t = new Thread(new Modify());
                t.start();
            }
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    public static void copyFile(File in, File out)
            throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(),
                    outChannel);
        } catch (IOException e) {
            logger.warning(e.getMessage());
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }

    public static void copyFile2(InputStream in, File dstPath) throws IOException {
        OutputStream out = new FileOutputStream(dstPath);
        // Transfer bytes from in to out
        byte[] buf = new byte[1024];

        int len;

        while ((len = in.read(buf)) > 0) {

            out.write(buf, 0, len);

        }

        in.close();

        out.close();
    }

    public void copyDirectory(File srcPath, File dstPath) throws IOException {

        if (srcPath.isDirectory()) {

            if (!dstPath.exists()) {

                dstPath.mkdir();

            }


            String files[] = srcPath.list();

            for (int i = 0; i < files.length; i++) {
                copyDirectory(new File(srcPath, files[i]),
                        new File(dstPath, files[i]));

            }

        } else {

            if (!srcPath.exists()) {

                System.out.println("File or directory does not exist.");

                System.exit(0);

            } else {

                InputStream in = new FileInputStream(srcPath);
                OutputStream out = new FileOutputStream(dstPath);
                // Transfer bytes from in to out
                byte[] buf = new byte[1024];

                int len;

                while ((len = in.read(buf)) > 0) {

                    out.write(buf, 0, len);

                }

                in.close();

                out.close();

            }

        }

    }

    public void deleteDirectory(File srcPath) throws IOException {

        if (srcPath.isDirectory()) {
            String files[] = srcPath.list();

            for (int i = 0; i < files.length; i++) {
                deleteDirectory(new File(srcPath, files[i]));
            }
            srcPath.delete();
        } else {

            File in = new File(srcPath.getPath());
            in.delete();

        }

    }

    class Modify implements Runnable {

        @Override
        public void run() {

            try {
                File sourceProject = new File(projectPath);


                // Make client
                String projectFolderName = sourceProject.getName();
                File projectParent = sourceProject.getParentFile();

                File client = new File(projectParent, projectFolderName + "_Client");
                client.mkdir();
                copyDirectory(sourceProject, client);
                new File(client, ANDROID_NETWORK_SOURCE).mkdirs();

                try {
                    //copy from jar file
                    copyFile2(this.getClass().getResourceAsStream("/Cloud.txt"), new File(client, ANDROID_NETWORK_SOURCE + "Cloud.java"));
                    copyFile2(this.getClass().getResourceAsStream("/CloudController.txt"), new File(client, ANDROID_NETWORK_SOURCE + "CloudController.java"));
                    copyFile2(this.getClass().getResourceAsStream("/CloudRemotable.txt"), new File(client, ANDROID_NETWORK_SOURCE + "CloudRemotable.java"));
                    copyFile2(this.getClass().getResourceAsStream("/NetworkManagerClient.txt"), new File(client, ANDROID_NETWORK_SOURCE + "NetworkManagerClient.java"));
                    copyFile2(this.getClass().getResourceAsStream("/Pack.txt"), new File(client, ANDROID_NETWORK_SOURCE + "Pack.java"));
                    copyFile2(this.getClass().getResourceAsStream("/ResultPack.txt"), new File(client, ANDROID_NETWORK_SOURCE + "ResultPack.java"));
                } catch (Exception ex) {

                }

                File NetInfo = new File(client, ANDROID_NETWORK_SOURCE + "NetInfo.java");
                writeNetworkAddress(NetInfo);

                EditMojo em = new EditMojo(new File(client, "src"));
                em.execute();
                clientLable.setText(client.toString());

                // Make server
                File server = new File(projectParent, projectFolderName + "_Server");
                server.mkdir();
                copyDirectory(sourceProject, server);
                new File(server, ANDROID_NETWORK_SOURCE).mkdirs();


                try {

                    //copy from MC class to copy to android  source folder.
                    copyFile2(this.getClass().getResourceAsStream("/Cloud.txt"), new File(server, ANDROID_NETWORK_SOURCE + "Cloud.java"));
                    copyFile2(this.getClass().getResourceAsStream("/CloudController.txt"), new File(server, ANDROID_NETWORK_SOURCE + "CloudController.java"));
                    copyFile2(this.getClass().getResourceAsStream("/CloudRemotable.txt"), new File(server, ANDROID_NETWORK_SOURCE + "CloudRemotable.java"));
                    copyFile2(this.getClass().getResourceAsStream("/Main.txt"), new File(server, ANDROID_NETWORK_SOURCE + "Main.java"));
                    copyFile2(this.getClass().getResourceAsStream("/NetworkManagerClient.txt"), new File(server, ANDROID_NETWORK_SOURCE + "NetworkManagerClient.java"));
                    copyFile2(this.getClass().getResourceAsStream("/NetworkManagerServer.txt"), new File(server, ANDROID_NETWORK_SOURCE + "NetworkManagerServer.java"));
                    copyFile2(this.getClass().getResourceAsStream("/Pack.txt"), new File(server, ANDROID_NETWORK_SOURCE + "Pack.java"));
                    copyFile2(this.getClass().getResourceAsStream("/ResultPack.txt"), new File(server, ANDROID_NETWORK_SOURCE + "ResultPack.java"));

                } catch (Exception ex) {

                }

                NetInfo = new File(server, ANDROID_NETWORK_SOURCE + "NetInfo.java");
                writeNetworkAddress(NetInfo);

                EditMojo em2 = new EditMojo(new File(server, "src"));
                em2.execute();


                serverLable.setText(server.toString());

            } catch (Exception ex) {
                logger.warning(ex.getMessage());
            }

            jProgressBar1.setIndeterminate(false);
        }
    }

    void writeNetworkAddress(File destPath) {
        try {
            FileWriter fe = new FileWriter(destPath);

            fe.write("package edu.ut.mobile.network;\n\n");

            fe.write("public class NetInfo{\n");

            fe.write("\tstatic byte[] IPAddress = {" + IPAddress[0] + "," + IPAddress[1] + "," + IPAddress[2] + ","
                    + IPAddress[3] + "};\n");
            fe.write("\tstatic int port = " + port + ";\n");
            fe.write("\tstatic int waitTime = " + waittime + ";\n");
            fe.write("}");
            fe.flush();
            fe.close();
        } catch (IOException ex) {
            logger.warning(ex.getMessage());
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.setLocation((GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint().x - mainFrame.getWidth() / 2), 10);
                mainFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPAddressTF;
    private javax.swing.JTextField PortTF;
    private javax.swing.JLabel clientLable;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField projectTF;
    private javax.swing.JButton selectButton;
    private javax.swing.JLabel serverLable;
    private javax.swing.JTextField waitTimeEF;
    // End of variables declaration//GEN-END:variables
}
